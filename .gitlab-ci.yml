################################################################################
# Changes to this file requires approval from Labs. Please add a person from   #
# Labs as required approval to your MR if you have any changes.                #
################################################################################

# For the release steps to work, the following environment variables have to set
# in the Gitlab UI:
# RELEASE_REGISTRY_USER
# RELEASE_REGISTRY_PASSWORD

# Saltbert, used for automatic deployment of our test server
include:
  - project: 'labs/salt-automation'
    file: '/gitlab-ci-templates/common/saltbert.v1.yml'

stages:
  - lint
  - pre-build
  - build
  - test
  - release
  - deploy


variables:
  # Project variables
  RELEASE_REGISTRY: docker.io
  RELEASE_REPORT_IMAGE: index.docker.io/magentaaps/os2datascanner-report
  RELEASE_ADMIN_IMAGE: index.docker.io/magentaaps/os2datascanner-admin
  RELEASE_ENGINE_IMAGE: index.docker.io/magentaaps/os2datascanner-engine
  RELEASE_API_IMAGE: index.docker.io/magentaaps/os2datascanner-api

  BASE_IMAGE: ${CI_REGISTRY_IMAGE}/base:${CI_COMMIT_SHA}
  REPORT_IMAGE: ${CI_REGISTRY_IMAGE}/report:${CI_COMMIT_SHA}
  ADMIN_IMAGE: ${CI_REGISTRY_IMAGE}/admin:${CI_COMMIT_SHA}
  ENGINE_IMAGE: ${CI_REGISTRY_IMAGE}/engine:${CI_COMMIT_SHA}
  API_IMAGE: ${CI_REGISTRY_IMAGE}/api:${CI_COMMIT_SHA}


# Lint stage
#############

.lint-default: &lint-default
  stage: lint
  needs: []
  services: []
  tags:
    - docker

Lint Dockerfiles:
  <<: *lint-default
  image: hadolint/hadolint:latest-alpine
  before_script:
    - apk add fd
  script:
    - echo "Running Hadolint, a Dockerfile linter"
    - echo "For more information about reported errors, visit the Hadolint wiki on https://github.com/hadolint/hadolint/wiki"
    # Run fd without exec arg to produce a list of files to be linted
    - fd Dockerfile
    # Run hadolint on every Dockerfile
    - fd Dockerfile --exec hadolint

Lint shell scripts:
  <<: *lint-default
  image: koalaman/shellcheck-alpine:latest
  before_script:
    - apk update
    - apk add fd
  script:
    - fd --extension sh --exec shellcheck

Lint Python:
  <<: *lint-default
  image: python:3.9
  stage: lint
  script:
    # Flake8 5.0.0 introduced a bug: module 'flake8.options.config' has no attribute 'ConfigFileFinder'
    # pinning to flake8 version 4.0.1, until a fix by either flake8 or pflake8 is released.
    - pip install flake8==4.0.1 pyproject-flake8 flake8-bugbear flake8-cognitive-complexity flake8-expression-complexity --quiet
    - pflake8 src

Lint js scripts:
  <<: *lint-default
  image: node:16-alpine3.11
  stage: lint
  script:
    # Install JSHint in this docker container
    - npm install -g jshint

    # Run JSHint
    - jshint ./src/os2datascanner/projects
      --config .jshintrc
      --exclude-path .jshintignore

.build-buildkit: &build-buildkit
  stage: build
  needs: []
  tags:
    - buildkit
  image:
    name: moby/buildkit:rootless
    entrypoint: ["sh", "-c"]
  variables:
    BUILDKITD_FLAGS: --oci-worker-no-process-sandbox
    BUILDKIT_PROGRESS: plain
  script:
    - export DOCKERFILE_DIR=${CI_PROJECT_DIR}/docker/base
    - export DOCKER_CONTEXT=${CI_PROJECT_DIR}
    - |
      mkdir ~/.docker
      ci_auth=$(echo -n "$CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD" | base64)
      echo "{\"auths\": {\"$CI_REGISTRY\": {\"auth\": \"$ci_auth\"}}}" > ~/.docker/config.json
      buildctl-daemonless.sh build \
          --frontend=dockerfile.v0 \
          --local context=$DOCKER_CONTEXT \
          --local dockerfile=$DOCKERFILE_DIR \
          --import-cache type=registry,ref=$IMAGE_CACHE_REGISTRY \
          --export-cache type=registry,ref=$IMAGE_CACHE_REGISTRY \
          --output type=image,name=$IMAGE_NAME,push=true \
          $EXTRA_BUILD_OPTS

# Pre-build stage
Build base image:
  extends:
    - .build-buildkit
  stage: pre-build
  before_script:
    - export IMAGE_NAME=${BASE_IMAGE}
    - export IMAGE_CACHE_REGISTRY=${CI_REGISTRY_IMAGE}/cache-base
    - export EXTRA_BUILD_OPTS="--opt target=base"

# Build stage
##############
.build-default: &build-default
  extends:
    - .build-buildkit
  needs: ["Build base image"]

Build Report Application:
  extends:
    - .build-default
  before_script:
    - export IMAGE_NAME=${REPORT_IMAGE}
    - export IMAGE_CACHE_REGISTRY=${CI_REGISTRY_IMAGE}/cache-report
    - export EXTRA_BUILD_OPTS="--opt build-arg:BASE_IMAGE=${BASE_IMAGE} --opt target=report"

Build Admin Application:
  extends:
    - .build-default
  before_script:
    - export IMAGE_NAME=${ADMIN_IMAGE}
    - export IMAGE_CACHE_REGISTRY=${CI_REGISTRY_IMAGE}/cache-admin
    - export EXTRA_BUILD_OPTS="--opt build-arg:BASE_IMAGE=${BASE_IMAGE} --opt target=admin"

Build Engine:
  extends:
    - .build-default
  before_script:
    - export IMAGE_NAME=${ENGINE_IMAGE}
    - export IMAGE_CACHE_REGISTRY=${CI_REGISTRY_IMAGE}/cache-engine
    - export EXTRA_BUILD_OPTS="--opt build-arg:BASE_IMAGE=${BASE_IMAGE} --opt target=engine"

Build API:
  extends:
    - .build-default
  before_script:
    - export IMAGE_NAME=${API_IMAGE}
    - export IMAGE_CACHE_REGISTRY=${CI_REGISTRY_IMAGE}/cache-api
    - export EXTRA_BUILD_OPTS="--opt build-arg:BASE_IMAGE=${BASE_IMAGE} --opt target=api"

# Test stage
#############

.test-default: &test-default
  stage: test
  tags:
    - docker
    - network-per-build
  services:
    - name: egnmagenta/os2datasynth:v0.2.5
      alias: datasynth
      variables:
        DATASYNTH_HOST: "datasynth"
    - postgres:12
    - rabbitmq:3.8-alpine
    - name: magentalabs/samba-test:1.1
      alias: samba
  variables:
    SMB_USER: os2
    SMB_PASSWD: 12345_rosebud_password_admin
    SMB_SHARE_NAME: general
    SMB_SHARE_PATH: ${CI_PROJECT_DIR}/src/os2datascanner/engine2/tests/data/engine2
    SMB_SHARE_BROWSABLE: "no"
    SMB_SHARE_READONLY: "yes"
    POSTGRES_DB: os2datascanner
    POSTGRES_USER: os2datascanner
    POSTGRES_PASSWORD: os2datascanner
  coverage: '/^TOTAL.+?(\d+\%)$/'

Unit Test Admin Application:
  extends: .test-default
  image:
    name: ${ADMIN_IMAGE}
    entrypoint: [""]
  variables:
    OS2DS_ADMIN_USER_CONFIG_PATH: ${CI_PROJECT_DIR}/dev-environment/admin/test-settings.toml
  needs:
    - Build Admin Application
  script:
    - cd /code/src/os2datascanner/projects/admin
    # check migrations
    - python manage.py makemigrations --check --dry-run
    - coverage run -m pytest tests
      --ignore=/code/src/os2datascanner/projects/admin/tests/integration
      --junitxml $CI_PROJECT_DIR/admin_unit_tests-junit.xml
      -p no:cacheprovider
      --color=yes
    - coverage report
    - coverage xml -o ${CI_PROJECT_DIR}/admin-coverage.xml
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/admin-coverage.xml
    when: always
    reports:
      junit: $CI_PROJECT_DIR/admin_unit_tests-junit.xml
      coverage_report:
        coverage_format: cobertura
        path: ${CI_PROJECT_DIR}/admin_unit_tests-junit.xml

Integration Test Admin Application:
  image:
    name: ${ADMIN_IMAGE}
    entrypoint: [""]
  tags:
    - docker
    - network-per-build
  stage: test
  rules:
    - when: never  # until 53346 is fixed 
  services:
    - name: egnmagenta/os2datasynth:v0.2.5
      alias: datasynth
      variables:
       DATASYNTH_HOST: "datasynth"
    - rabbitmq:3.8-alpine
    - postgres:12
    - name: magentalabs/samba-test:1.1
      alias: samba
    - name: ${ENGINE_IMAGE}
      alias: worker
      command: [worker]
    - name: ${ENGINE_IMAGE}
      alias: explorer
      command: [explorer]
    - name: ${ENGINE_IMAGE}
      alias: exporter
      command: [exporter]
  variables:
    SMB_USER: os2
    SMB_PASSWD: 12345_rosebud_password_admin
    SMB_SHARE_NAME: general
    SMB_SHARE_PATH: ${CI_PROJECT_DIR}/src/os2datascanner/engine2/tests/data/engine2
    SMB_SHARE_BROWSABLE: "no"
    SMB_SHARE_READONLY: "yes"
    POSTGRES_DB: os2datascanner
    POSTGRES_USER: os2datascanner
    POSTGRES_PASSWORD: os2datascanner
    COVERAGE_FILE: /tmp/.coverage
    FF_NETWORK_PER_BUILD: "true"
    DATASYNTH_HOST: "datasynth"
    OS2DS_ENGINE_USER_CONFIG_PATH: ${CI_PROJECT_DIR}/dev-environment/engine/test-settings.toml
  needs:
    - Build Admin Application
    - Build Engine
  script:
    - export OS2DS_ADMIN_USER_CONFIG_PATH=${CI_PROJECT_DIR}/dev-environment/admin/test-settings.toml
    - cd src/os2datascanner/projects/admin
    - bash /code/docker/docker-entrypoint.sh
    # The pipeline collector cannot be created as a service, as the ADMIN_USER_PATH
    # overwrites the ENGINE_USER_PATH and individual services cannot have variables set.
    - python manage.py pipeline_collector &
    - django-admin test os2datascanner.projects.admin.tests.integration

Integration Test Engine:
  extends: .test-default
  image: ${ENGINE_IMAGE}
  variables:
    OS2DS_ENGINE_USER_CONFIG_PATH: ${CI_PROJECT_DIR}/dev-environment/engine/test-settings.toml
  needs:
    - Build Engine
  script:
    - cd /code/src/os2datascanner/engine2/tests
    - coverage run -m pytest integration/
      --junitxml $CI_PROJECT_DIR/integration-junit.xml
      -p no:cacheprovider
      --color=yes
    - coverage report
    - coverage xml -o ${CI_PROJECT_DIR}/intergration-engine-coverage.xml
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/intergration-engine-coverage.xml
    when: always
    reports:
      junit: $CI_PROJECT_DIR/integration-junit.xml
      coverage_report:
        coverage_format: cobertura
        path: ${CI_PROJECT_DIR}/intergration-engine-coverage.xml

Unit Test Engine:
  extends: .test-default
  stage: test
  tags:
    - docker
  image:
    name: ${ENGINE_IMAGE}
  variables:
    OS2DS_ENGINE_USER_CONFIG_PATH: ${CI_PROJECT_DIR}/dev-environment/engine/test-settings.toml
  needs:
    - Build Engine
  script:
    - cd /code/src/os2datascanner/engine2
    - coverage run -m pytest tests
      --ignore-glob '*integration*'
      --junitxml $CI_PROJECT_DIR/engine-junit.xml
      -p no:cacheprovider
      --color=yes
    - coverage report
    - coverage xml -o ${CI_PROJECT_DIR}/engine-coverage.xml
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/engine-coverage.xml
    when: always
    reports:
      junit: $CI_PROJECT_DIR/engine-junit.xml
      coverage_report:
        coverage_format: cobertura
        path: ${CI_PROJECT_DIR}/engine-coverage.xml

Benchmark Test Engine:
  stage: test
  tags:
    - docker
  image:
    name: ${ENGINE_IMAGE}
  needs:
    - Build Engine
  services:
    - postgres:12
    - rabbitmq:3.8-alpine
  variables:
    OS2DS_ENGINE_USER_CONFIG_PATH: ${CI_PROJECT_DIR}/dev-environment/engine/test-settings.toml
    POSTGRES_DB: os2datascanner
    POSTGRES_USER: os2datascanner
    POSTGRES_PASSWORD: os2datascanner
  script:
    - cd /code/src/os2datascanner/engine2
    - pytest --color=yes --benchmark-only tests/benchmarks
  coverage: '/^TOTAL.+?(\d+\%)$/'

Performance Test:
  image:
    name: ${ADMIN_IMAGE}
    entrypoint: [""]
  tags:
    - docker
    - network-per-build
    - high-mem
  rules:
    - when: never # until 53346 is fixed
  services:
    - name: egnmagenta/os2datasynth:v0.2.5
      alias: datasynth
      variables:
       DATASYNTH_HOST: "datasynth"
    - rabbitmq:3.8-alpine
    - postgres:12
    - name: magentalabs/samba-test:1.1
      alias: samba
    - name: ${ENGINE_IMAGE}
      alias: worker
      command: [worker]
    - name: ${ENGINE_IMAGE}
      alias: explorer
      command: [explorer]
    - name: ${ENGINE_IMAGE}
      alias: exporter
      command: [exporter]
  variables:
    SMB_USER: os2
    SMB_PASSWD: 12345_rosebud_password_admin
    SMB_SHARE_NAME: general
    SMB_SHARE_PATH: ${CI_PROJECT_DIR}/src/os2datascanner/engine2/tests/data/engine2
    SMB_SHARE_BROWSABLE: "no"
    SMB_SHARE_READONLY: "yes"
    POSTGRES_DB: os2datascanner
    POSTGRES_USER: os2datascanner
    POSTGRES_PASSWORD: os2datascanner
    COVERAGE_FILE: /tmp/.coverage
    FF_NETWORK_PER_BUILD: "true"
    DATASYNTH_HOST: "datasynth"
    OS2DS_ENGINE_USER_CONFIG_PATH: ${CI_PROJECT_DIR}/dev-environment/engine/test-settings.toml
  needs:
    - Build Admin Application
    - Build Engine
  script:
    - export OS2DS_ADMIN_USER_CONFIG_PATH=${CI_PROJECT_DIR}/dev-environment/admin/test-settings.toml
    - cd src/os2datascanner/projects/admin
    - bash /code/docker/docker-entrypoint.sh

    # The pipeline collector cannot be created as a service, as the ADMIN_USER_PATH
    # overwrites the ENGINE_USER_PATH and individual services cannot have variables set.
    - python manage.py pipeline_collector &
    - python manage.py performance_measurement ${CI_PROJECT_DIR}
  artifacts:
    when: always
    paths:
      - ${CI_PROJECT_DIR}/performance.prof

Unit Test Report Application:
  extends: .test-default
  image: ${REPORT_IMAGE}
  variables:
    OS2DS_REPORT_USER_CONFIG_PATH: ${CI_PROJECT_DIR}/dev-environment/report/test-settings.toml
  needs:
    - Build Report Application
  script:
    - cd /code/src/os2datascanner/projects/report
    # check migrations
    - python manage.py makemigrations --check --dry-run
    - coverage run -m pytest tests
      --ignore=/code/src/os2datascanner/projects/report/tests/integration
      --junitxml $CI_PROJECT_DIR/report-junit.xml
      --ignore=/code/src/os2datascanner/projects/report/tests/integration
      -p no:cacheprovider
      --color=yes
    - coverage report
    - coverage xml -o ${CI_PROJECT_DIR}/report-coverage.xml
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/report-coverage.xml
    when: always
    reports:
      junit: $CI_PROJECT_DIR/report-junit.xml
      coverage_report: 
        coverage_format: cobertura
        path: ${CI_PROJECT_DIR}/report-coverage.xml

Integration Test Report Application:
  image:
    name: ${REPORT_IMAGE}
    entrypoint: [""]
  stage: test
  rules:
    - when: never # until 53346 is fixed
  allow_failure: true # until 48725 has been fixed
  tags:
    - docker
    - network-per-build
  services:
    - name: egnmagenta/os2datasynth:v0.2.5
      alias: datasynth
      variables:
        DATASYNTH_HOST: "datasynth"
    - rabbitmq:3.8-alpine
    - postgres:12
    - name: ${API_IMAGE}
      alias: api_server
  variables:
    POSTGRES_DB: os2datascanner
    POSTGRES_USER: os2datascanner
    POSTGRES_PASSWORD: os2datascanner
    DATASYNTH_HOST: "datasynth"
    server__token: 'thisIsNotASecret'
    FF_NETWORK_PER_BUILD: "true"
    OS2DS_SERVER_USER_CONFIG_PATH: ${CI_PROJECT_DIR}/dev-environment/api/dev-settings.toml
  needs:
    - Build Report Application
    - Build API
  script:
    - export OS2DS_REPORT_USER_CONFIG_PATH=${CI_PROJECT_DIR}/dev-environment/report/test-settings.toml
    - cd src/os2datascanner/projects/report
    - bash /code/docker/docker-entrypoint.sh
    - django-admin test os2datascanner.projects.report.tests.integration

Run Engine notice scripts:
  stage: test
  tags:
    - docker
  services: []
  image: ${ENGINE_IMAGE}
  needs:
    - Build Engine
  variables:
    OS2DS_ENGINE_USER_CONFIG_PATH: ${CI_PROJECT_DIR}/dev-environment/engine/test-settings.toml
    # ensure entrypoint.sh is running without trying to connect to DB/RabbitMQ/
    # This cannot be yes/no or something `yaml` interprets as a boolean
    BARE_MODE: yup
  script:
    - python -m unittest discover -s src/os2datascanner/engine2/tests/ --pattern "notice*.py"
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"

# Release stage
###############

.release-default: &release-default
  stage: release
  needs:
    # we do not have any test cases for the api
    - Build API
    - Unit Test Admin Application
    - Unit Test Engine
    - Integration Test Engine
    - Unit Test Report Application
    # No point in waiting for jobs that always fail...
    #- Integration Test Admin Application
    #- Integration Test Report Application
  image: alpine
  variables:
    GIT_STRATEGY: none # We do not need the source code
  tags:
    - docker

# Rolling rc release:
# NOTICE: We are optimizing for the 99% case here by releasing a new image as soon as
# it is built. This is ok because (semi-)linear history means that the most recently
# merged branch is line-for-line equivalent to main and as such has been tested
# thoroughly. Branch protection ensures nobody commits directly to main.
.release-rc: &release-rc
  <<: *release-default
  needs:
    - Build Report Application
    - Build Admin Application
    - Build Engine
    - Build API
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main" && $CI_PIPELINE_SOURCE != "schedule"'
  script:
    - apk add skopeo
    - skopeo copy
      --src-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}
      --dest-creds=${RELEASE_REGISTRY_USER}:${RELEASE_REGISTRY_PASSWORD}
      "docker://${IMAGE_FROM}"
      "docker://${IMAGE_TO}:dev"

Release Report Application Candidate:
  <<: *release-rc
  before_script:
    - export IMAGE_FROM="${REPORT_IMAGE}"
    - export IMAGE_TO="${RELEASE_REPORT_IMAGE}"

Release Admin Application Candidate:
  <<: *release-rc
  before_script:
    - export IMAGE_FROM="${ADMIN_IMAGE}"
    - export IMAGE_TO="${RELEASE_ADMIN_IMAGE}"

Release Engine Candidate:
  <<: *release-rc
  before_script:
    - export IMAGE_FROM="${ENGINE_IMAGE}"
    - export IMAGE_TO="${RELEASE_ENGINE_IMAGE}"

Release API Candidate:
  <<: *release-rc
  before_script:
    - export IMAGE_FROM="${API_IMAGE}"
    - export IMAGE_TO="${RELEASE_API_IMAGE}"

# Release pinned pre-release:
# Separate from "Versioned release" (.release) because we don't want to push to :latest tags
.release-pinned-rc: &release-pinned-rc
  <<: *release-default
  only:
    variables:
      # Matches SemVer 2.0.0 with pre-release group. Ex. 2.3.4-rc, 2.3.4-rc2 or 2.3.4-prerelease1, but not 2.3.4
      - $CI_COMMIT_TAG =~ /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*)){1}(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/
  script:
    - apk add skopeo
    - skopeo copy
      --src-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}
      --dest-creds=${RELEASE_REGISTRY_USER}:${RELEASE_REGISTRY_PASSWORD}
      "docker://${IMAGE_FROM}"
      "docker://${IMAGE_TO}:${CI_COMMIT_TAG}"

Release Report Application pinned Candidate:
  <<: *release-pinned-rc
  before_script:
    - export IMAGE_FROM="${REPORT_IMAGE}"
    - export IMAGE_TO="${RELEASE_REPORT_IMAGE}"

Release Admin Application pinned Candidate:
  <<: *release-pinned-rc
  before_script:
    - export IMAGE_FROM="${ADMIN_IMAGE}"
    - export IMAGE_TO="${RELEASE_ADMIN_IMAGE}"

Release Engine pinned Candidate:
  <<: *release-pinned-rc
  before_script:
    - export IMAGE_FROM="${ENGINE_IMAGE}"
    - export IMAGE_TO="${RELEASE_ENGINE_IMAGE}"

Release API pinned Candidate:
  <<: *release-pinned-rc
  before_script:
    - export IMAGE_FROM="${API_IMAGE}"
    - export IMAGE_TO="${RELEASE_API_IMAGE}"

# Versioned release:
.release: &release
  <<: *release-default
  rules:
      # Matches <version core> from SemVer 2.0.0 BNF grammar. Ex. 2.3.4, but not 2.3.4-rc
      - if: $CI_COMMIT_TAG =~ /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/
  script:
    - apk add skopeo
    - skopeo copy
      --src-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}
      --dest-creds=${RELEASE_REGISTRY_USER}:${RELEASE_REGISTRY_PASSWORD}
      "docker://${IMAGE_FROM}"
      "docker://${IMAGE_TO}:${CI_COMMIT_TAG}"
    - skopeo copy
      --src-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}
      --dest-creds=${RELEASE_REGISTRY_USER}:${RELEASE_REGISTRY_PASSWORD}
      "docker://${IMAGE_FROM}"
      "docker://${IMAGE_TO}:latest"

Release Report Application:
  <<: *release
  before_script:
    - export IMAGE_FROM="${REPORT_IMAGE}"
    - export IMAGE_TO="${RELEASE_REPORT_IMAGE}"

Release Admin Application:
  <<: *release
  before_script:
    - export IMAGE_FROM="${ADMIN_IMAGE}"
    - export IMAGE_TO="${RELEASE_ADMIN_IMAGE}"

Release Engine:
  <<: *release
  before_script:
    - export IMAGE_FROM="${ENGINE_IMAGE}"
    - export IMAGE_TO="${RELEASE_ENGINE_IMAGE}"

Release API:
  <<: *release
  before_script:
    - export IMAGE_FROM="${API_IMAGE}"
    - export IMAGE_TO="${RELEASE_API_IMAGE}"

# Deploy stage
##############

Deploy test:
  # Automatic deployment of main branch to
  # https://test.os2datascanner.dk/ and https://test-admin.os2datascanner.dk/
  extends:
    - .saltbert
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main" && $CI_PIPELINE_SOURCE != "schedule"'
  needs:
    - Release Report Application Candidate
    - Release Admin Application Candidate
    - Release Engine Candidate
    - Release API Candidate
  variables:
    SALTBERT_ORCHESTRATION: os2ds.service-test
    SALTBERT_URL: https://saltmaster.os2ds.magentahosted.dk
    SALTBERT_PASSWORD: $SALTBERT_PASSWORD
  environment:
    name: test
    url: https://test-admin.os2datascanner.dk/
