DEBUG = False

ALLOWED_HOSTS = ['INSERT_DOMAIN_NAME']

# Site URL for calculating absolute URLs in emails.
SITE_URL = 'INSERT_DOMAIN_NAME'

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'INSERT_SECRET_KEY'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'INSERT_DB_NAME',
        'USER': 'INSERT_DB_USER',
        'PASSWORD': 'INSERT_DB_PASSWD',
        'HOST': '127.0.0.1',
    }
}

DATABASE_POOL_ARGS = {
    'max_overflow': 10,
    'pool_size': 5,
    'recycle': 300
}

DEFAULT_FROM_EMAIL = 'INSERT_DEFAULT_FROM_EMAIL'
ADMIN_EMAIL = 'INSERT_ADMIN_EMAIL'
EMAIL_HOST = 'localhost'
EMAIL_PORT = 25
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

# The name of the institution, to be included in the notification signoff
NOTIFICATION_INSTITUTION = 'INSERT_INSTITUTION'

SAML2_ENABLED = False

# The full documentation can be found here: https://github.com/fangli/django-saml2-auth
# *Note: The package used is https://github.com/magenta-aps/django-saml2-auth as it supports Signed AUTHN_REQUESTS.
SAML2_AUTH = {
    # Metadata is required, choose either remote url or local file path
    'METADATA_AUTO_CONF_URL': '[The auto(dynamic) metadata configuration URL of SAML2]',
    # 'METADATA_LOCAL_FILE_PATH': '[The metadata configuration file path]',

    # Optional settings below
    'DEFAULT_NEXT_URL': '/',  # Custom target redirect URL after the user get logged in. Default to /admin if not set. This setting will be overwritten if you have parameter ?next= specificed in the login URL.
    'CREATE_USER': 'TRUE', # Create a new Django user when a new user logs in. Defaults to True.
    'NEW_USER_PROFILE': {
        "ACTIVE_STATUS": True,
        "STAFF_STATUS": False,
        "SUPERUSER_STATUS": False,
    },
    'ATTRIBUTES_MAP': {
        "email": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress",
        "username": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name",
        "first_name": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname",
        "last_name": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname",
        "sid": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/securityidentifier",
    },
    'TRIGGER': {
        "CREATE_USER": "os2datascanner.projects.report.reportapp.utils.get_or_create_user_aliases",
        "BEFORE_LOGIN": "os2datascanner.projects.report.reportapp.utils.get_or_create_user_aliases",
    },
    'ASSERTION_URL': 'https:INSERT_DOMAIN_NAME', # Custom URL to validate incoming SAML requests against
    'ENTITY_ID': 'https://INSERT_DOMAIN_NAME/saml2_auth/acs/', # Populates the Issuer element in authn request
    'NAME_ID_FORMAT': 'urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified', # Sets the Format property of authn NameIDPolicy element
    'USE_JWT': False, # Set this to True if you are running a Single Page Application (SPA) with Django Rest Framework (DRF), and are using JWT authentication to authorize client users
    'FRONTEND_URL': 'https://INSERT_DOMAIN_NAME' + '#/', # Redirect URL for the client if you are using JWT auth with DRF. See explanation below
    'CERT_FILE': '',  # Public part of the service private/public key pair. Must be a PEM formatted certificate chain file.
    'KEY_FILE':  '',  # The name of a PEM formatted file that contains the private key of the service. This is presently used both to encrypt/sign assertions and as the client key in an HTTPS session.
    'AUTHN_REQUESTS_SIGNED': False  # Indicates if the Authentication Requests sent by this SP should be signed by default.
}