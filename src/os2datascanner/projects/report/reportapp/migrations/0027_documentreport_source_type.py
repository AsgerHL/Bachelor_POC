# Generated by Django 2.2.10 on 2021-03-02 14:07

from sys import stderr
from django.db import migrations, models

from os2datascanner.engine2.pipeline import messages
from ..utils import iterate_queryset_in_batches


def extract_source_types(apps, schema_editor):
    DocumentReport = apps.get_model("os2datascanner_report", "DocumentReport")
    untyped_reports = DocumentReport.objects.filter(source_type__isnull=True)

    for batch in iterate_queryset_in_batches(10000, untyped_reports):
        for report in batch:
            # Try to extract the appropriate Source to label this report
            source = None
            matches = report.data.get("matches")
            if matches:
                # Match messages are easy: just take the Source from the
                # Handle in which matches were found
                message = messages.MatchesMessage.from_json_object(matches)
                source = message.handle.source
            else:
                problem = report.data.get("problem")

                if problem:
                    # Problem messages are a bit trickier, since they can
                    # identify issues with either Sources or Handles. Work out
                    # which field is relevant for this message
                    message = messages.ProblemMessage.from_json_object(problem)

                    if message.handle:
                        source = message.handle.source
                    elif message.source:
                        source = message.source
                else:
                    metadata = report.data.get("metadata")

                    if metadata:
                        # Metadata messages are also easy, although it's a bit
                        # odd that we've found one with no associated matches
                        print("warning: {0} appears to contain unpaired"
                                " metadata".format(report), file=stderr)
                        message = messages.MetadataMessage.from_json_object(
                                metadata)
                        source = message.handle.source
                    else:
                        # We tried as hard as we could
                        pass

            # If we were able to find a Source, then search for its top-level
            # parent and tag this report with its label
            if source:
                while source.handle:
                    source = source.handle.source
                report.source_type = source.type_label
            else:
                # This should never happen, but we need to put something in
                # this field in all circumstances
                print("warning: {0} has no identifiable"
                        " source type".format(report), file=stderr)
                report.source_type = "unknown"
        DocumentReport.objects.bulk_update(batch, ['source_type'])


class Migration(migrations.Migration):

    dependencies = [
        ('os2datascanner_report', '0026_changing_documentreport_leader_dpo_verbose_names'),
    ]

    operations = [
        migrations.AddField(
            model_name='documentreport',
            name='source_type',
            field=models.CharField(max_length=2000, null=True, verbose_name='Source type'),
        ),
        migrations.RunPython(extract_source_types,
                             reverse_code=migrations.RunPython.noop),
        migrations.AlterField(
            model_name='documentreport',
            name='source_type',
            field=models.CharField(max_length=2000, verbose_name='Source type'),
        ),
    ]
