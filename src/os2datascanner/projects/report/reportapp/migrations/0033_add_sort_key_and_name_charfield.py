# Generated by Django 3.2.4 on 2021-10-07 12:27

from django.db import migrations, models
from os2datascanner.engine2.pipeline.messages import (
    MatchesMessage,
    ProblemMessage,
    MetadataMessage,
)
from ..utils import iterate_queryset_in_batches

"""NOTE:
We update the database Queryset in batches; if not, the update might fail
if the queryset is too large

This migration reads the jsonb-field, tries to get a presentation-string, split this
and populates the newly created sort_key and name fields
"""


def get_msg(query):
    # only one of these are not None
    matches = query.data.get("matches")
    metadata = query.data.get("metadata")
    problem = query.data.get("problem")

    if matches:
        return MatchesMessage.from_json_object(matches)
    elif problem:
        return ProblemMessage.from_json_object(problem)
    elif metadata:
        return MetadataMessage.from_json_object(metadata)
    else:
        return None


def get_presentation(query):
    """Get the handle"""

    type_msg = get_msg(query)
    if not type_msg:
        return ""

    return type_msg.handle if type_msg.handle else ""


def bulk_update_created_fpath_name_fields(apps, schema_editor):
    DocumentReport = apps.get_model("os2datascanner_report", "DocumentReport")
    print("starting batch migration")
    print(f"length of queryset, {DocumentReport.objects.count()}")

    queryset = DocumentReport.objects.all()


    for i, batch in enumerate(iterate_queryset_in_batches(10000, queryset)):
        for report in batch:
            if report.sort_key == "" or report.name == "":
                try:
                    handle = get_presentation(report)
                    if not handle:
                        continue

                    name = handle.presentation_name
                    report.sort_key = handle.sort_key
                    report.name = name
                except Exception as e:
                    print(
                        f"Exception {type(e).__name__}\t"
                        f"report={report}\t"
                        f"e={e}"
                    )

        print(f"preparing chunk {i} of bulk update")
        DocumentReport.objects.bulk_update(batch, ["sort_key", "name"])
        print("chunk done")


class Migration(migrations.Migration):

    dependencies = [
        ("os2datascanner_report", "0032_alter_documentreport_jsonfield"),
    ]

    operations = [
        migrations.AddField(
            model_name="documentreport",
            name="name",
            field=models.CharField(default="", max_length=256, verbose_name="name"),
        ),
        migrations.AddField(
            model_name="documentreport",
            name="sort_key",
            field=models.CharField(
                db_index=True, default="", max_length=256, verbose_name="sort key"
            ),
        ),
        # XXX don't populate fields. For large DBs this kills the migration
        # migrations.RunPython(
        #     bulk_update_created_fpath_name_fields,
        #     reverse_code=migrations.RunPython.noop,
        # ),
    ]
